{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sub",
				"sub_name"
			],
			[
				"name",
				"name_map"
			],
			[
				"File",
				"FileServer"
			],
			[
				"shared",
				"shared_ptr"
			],
			[
				"op",
				"m_opFromNdnSim"
			],
			[
				"send",
				"sendInterest"
			],
			[
				"Contn",
				"ContentStore"
			],
			[
				"shar",
				"shared_from_this"
			],
			[
				"m_op",
				"m_opFromNdnSim"
			],
			[
				"shart",
				"shared_ptr"
			],
			[
				"it",
				"it_op"
			],
			[
				"set",
				"setOpMIPS"
			],
			[
				"ndn",
				"ndnHelper"
			],
			[
				"m_",
				"m_maxMIPS"
			],
			[
				"Set",
				"SetTypeId"
			],
			[
				"in",
				"interest"
			],
			[
				"can",
				"canForwardTo"
			],
			[
				"Face",
				"FaceId"
			],
			[
				"wif",
				"wifiMacHelper"
			],
			[
				"Insta",
				"InstallAll"
			],
			[
				"make",
				"makeNullFace"
			],
			[
				"FACE",
				"FACEID_OBJECT_PROCESSOR"
			],
			[
				"getFace",
				"getFaceTable"
			],
			[
				"Uni",
				"UniformRandomVariable"
			],
			[
				"ns",
				"ns3"
			],
			[
				"pit",
				"pitEntry"
			],
			[
				"add",
				"addReserved"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/**\n * Copyright (c) 2014-2015,  Regents of the University of California,\n *                           Arizona Board of Regents,\n *                           Colorado State University,\n *                           University Pierre & Marie Curie, Sorbonne University,\n *                           Washington University in St. Louis,\n *                           Beijing Institute of Technology,\n *                           The University of Memphis.\n *\n * This file is part of NFD (Named Data Networking Forwarding Daemon).\n * See AUTHORS.md for complete list of NFD authors and contributors.\n *\n * NFD is free software: you can redistribute it and/or modify it under the terms\n * of the GNU General Public License as published by the Free Software Foundation,\n * either version 3 of the License, or (at your option) any later version.\n *\n * NFD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n * PURPOSE.  See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * NFD, e.g., in COPYING.md file.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"forwarder.hpp\"\n#include \"core/logger.hpp\"\n#include \"core/random.hpp\"\n#include \"strategy.hpp\"\n#include \"face/null-face.hpp\"\n\n#include \"utils/ndn-ns3-packet-tag.hpp\"\n#include <iostream>\n\n#include <boost/random/uniform_int_distribution.hpp>\n\nnamespace nfd {\n\nNFD_LOG_INIT(\"Forwarder\");\n\nusing fw::Strategy;\n\nconst Name Forwarder::LOCALHOST_NAME(\"ndn:/localhost\");\n\nForwarder::Forwarder()\n  : m_faceTable(*this)\n  , m_fib(m_nameTree)\n  , m_pit(m_nameTree)\n  , m_measurements(m_nameTree)\n  , m_strategyChoice(m_nameTree, fw::makeDefaultStrategy(*this))\n  , m_csFace(make_shared<NullFace>(FaceUri(\"contentstore://\")))\n  ,m_opFace(make_shared<NullFace>(FaceUri(\"objectprocessor://\")))\n{\n  fw::installStrategies(*this);\n  getFaceTable().addReserved(m_csFace, FACEID_CONTENT_STORE);\n  getFaceTable().addReserved(m_opFace,FACEID_OBJECT_PROCESSOR);\n}\n\nForwarder::~Forwarder()\n{\n\n}\n\nvoid\nForwarder::onIncomingInterest(Face& inFace, const Interest& interest)\n{\n  // receive Interest\n  NFD_LOG_DEBUG(\"onIncomingInterest face=\" << inFace.getId() <<\n                \" interest=\" << interest.getName());\n  const_cast<Interest&>(interest).setIncomingFaceId(inFace.getId());\n  ++m_counters.getNInInterests();\n\n  // /localhost scope control\n  bool isViolatingLocalhost = !inFace.isLocal() &&\n                              LOCALHOST_NAME.isPrefixOf(interest.getName());\n  if (isViolatingLocalhost) {\n    NFD_LOG_DEBUG(\"onIncomingInterest face=\" << inFace.getId() <<\n                  \" interest=\" << interest.getName() << \" violates /localhost\");\n    // (drop)\n    return;\n  }\n\n  // PIT insert\n  shared_ptr<pit::Entry> pitEntry = m_pit.insert(interest).first;\n\n  // detect duplicate Nonce\n  int dnw = pitEntry->findNonce(interest.getNonce(), inFace);\n  bool hasDuplicateNonce = (dnw != pit::DUPLICATE_NONCE_NONE) ||\n                           m_deadNonceList.has(interest.getName(), interest.getNonce());\n  if (hasDuplicateNonce) {\n    // goto Interest loop pipeline\n    this->onInterestLoop(inFace, interest, pitEntry);\n    return;\n  }\n\n  // cancel unsatisfy & straggler timer\n  this->cancelUnsatisfyAndStragglerTimer(pitEntry);\n\n  // is pending?\n  const pit::InRecordCollection& inRecords = pitEntry->getInRecords();\n  bool isPending = inRecords.begin() != inRecords.end();\n  if (!isPending) {\n    if (m_csFromNdnSim == nullptr) {\n      /*Cs::find(const Interest& interest,\n         const HitCallback& hitCallback,\n         const MissCallback& missCallback) const*/\n      /*\n        Forwarder::onContentStoreHit(const Face& inFace,\n                             shared_ptr<pit::Entry> pitEntry,\n                             const Interest& interest,\n                             const Data& data)\n\n        void\n        Forwarder::onContentStoreMiss(const Face& inFace,\n                              shared_ptr<pit::Entry> pitEntry,\n                              const Interest& interest)\n        onProcessingData(const Face& inFace, const Interest& interest, const Data& data);\n      */\n\n      m_cs.find(interest,\n                bind(&Forwarder::onContentStoreHit, this, ref(inFace), pitEntry, _1, _2),\n                bind(&Forwarder::onContentStoreMiss, this, ref(inFace), pitEntry, _1));\n      //OON\n    }\n    else {\n      shared_ptr<Data> match = m_csFromNdnSim->Lookup(interest.shared_from_this());\n      if (match != nullptr) {\n        this->onContentStoreHit(inFace, pitEntry, interest, *match);\n      }\n      else {\n        this->onObjectProcessorMiss(inFace, pitEntry, interest);\n      }\n    }\n  }\n  else {\n    this->onObjectProcessorMiss(inFace, pitEntry, interest);\n  }\n}\n\nvoid\nForwarder::onObjectProcessorMiss(const Face& inFace,\n                              shared_ptr<pit::Entry> pitEntry,\n                              const Interest& interest)\n{\n  NFD_LOG_DEBUG(\"onContentStoreMiss interest=\" << interest.getName());\n\n  shared_ptr<Face> face = const_pointer_cast<Face>(inFace.shared_from_this());\n  // insert InRecord\n  pitEntry->insertOrUpdateInRecord(face, interest);\n\n  // set PIT unsatisfy timer\n  this->setUnsatisfyTimer(pitEntry);\n\n  // FIB lookup\n  shared_ptr<fib::Entry> fibEntry = m_fib.findLongestPrefixMatch(*pitEntry);\n\n  // dispatch to strategy\n  this->dispatchToStrategy(pitEntry, bind(&Strategy::afterReceiveInterest, _1,\n                                          cref(inFace), cref(interest), fibEntry, pitEntry));\n}\n\nvoid\nForwarder::onContentStoreMiss(const Face& inFace,\n                              shared_ptr<pit::Entry> pitEntry,\n                              const Interest& interest)\n{\n    if (m_opFromNdnSim == nullptr) {\n      m_op.find(interest,\n                bind(&Forwarder::onProcessingData, this, ref(inFace), _1, _2),\n                bind(&Forwarder::onObjectProcessorMiss, this, ref(inFace), pitEntry, _1));\n    }\n    return;\n}\n\n\nvoid\nForwarder::onContentStoreHit(const Face& inFace,\n                             shared_ptr<pit::Entry> pitEntry,\n                             const Interest& interest,\n                             const Data& data)\n{\n  NFD_LOG_DEBUG(\"onContentStoreHit interest=\" << interest.getName());\n\n  beforeSatisfyInterest(*pitEntry, *m_csFace, data);\n  this->dispatchToStrategy(pitEntry, bind(&Strategy::beforeSatisfyInterest, _1,\n                                          pitEntry, cref(*m_csFace), cref(data)));\n\n  const_pointer_cast<Data>(data.shared_from_this())->setIncomingFaceId(FACEID_CONTENT_STORE);\n  // XXX should we lookup PIT for other Interests that also match csMatch?\n\n  //OON 20161209\n  //std::cout<<data.getContent().value()<<'\\t';\n  //quiName t_name = interest.getName();\n  //Data temp_data(data.getContent());\n  //temp_data.setSignature(data.getSignature());\n  // set PIT straggler timer\n  this->setStragglerTimer(pitEntry, true, data.getFreshnessPeriod());\n\n  // goto outgoing Data pipeline\n  this->onOutgoingData(data, *const_pointer_cast<Face>(inFace.shared_from_this()));\n}\n\n//OON\nvoid\nForwarder::onProcessingData(const Face& inFace, const Interest& interest, const Data& data)\n{   //todo\n    //volatile size_t i = 1;\n    //size_t size = data.getContent().value_size();\n    //for (i = 1; i < size; i++); //to do data processing\n    //onOutgoingData(data,outFace);\n    //std::cout<<data.getContent().value_size()<<\"\\t'\";\n     const_pointer_cast<Data>(data.shared_from_this())->setIncomingFaceId(FACEID_OBJECT_PROCESSOR);\n    if (inFace.getId() == INVALID_FACEID) {\n      NFD_LOG_WARN(\"onOutgoingData face=invalid data=\" << data.getName());\n      return;\n      //drop\n    }\n    NFD_LOG_DEBUG(\"onOutgoingData face=\" << inFace.getId() << \" data=\" << data.getName());\n    const_pointer_cast<Face>(inFace.shared_from_this())->sendData(data);\n    ++m_counters.getNOutDatas();\n    return;\n  }\n\n\nvoid\nForwarder::onInterestLoop(Face& inFace, const Interest& interest,\n                          shared_ptr<pit::Entry> pitEntry)\n{\n  NFD_LOG_DEBUG(\"onInterestLoop face=\" << inFace.getId() <<\n                \" interest=\" << interest.getName());\n\n  //OON\n  if (m_opFromNdnSim == nullptr){\n      return;\n  }else{\n    shared_ptr<Data> match = this->m_opFromNdnSim->Lookup(interest.shared_from_this());\n    NFD_LOG_DEBUG(\"onObjectProcessor interest=\" << interest.getName());\n    if (match != nullptr){\n      onProcessingData(*const_pointer_cast<Face>(inFace.shared_from_this()),interest,*match);\n    }\n    return;\n  }\n\n  // (drop)\n}\n\n/** \\brief compare two InRecords for picking outgoing Interest\n *  \\return true if b is preferred over a\n *\n *  This function should be passed to std::max_element over InRecordCollection.\n *  The outgoing Interest picked is the last incoming Interest\n *  that does not come from outFace.\n *  If all InRecords come from outFace, it's fine to pick that. This happens when\n *  there's only one InRecord that comes from outFace. The legit use is for\n *  vehicular network; otherwise, strategy shouldn't send to the sole inFace.\n */\nstatic inline bool\ncompare_pickInterest(const pit::InRecord& a, const pit::InRecord& b, const Face* outFace)\n{\n  bool isOutFaceA = a.getFace().get() == outFace;\n  bool isOutFaceB = b.getFace().get() == outFace;\n\n  if (!isOutFaceA && isOutFaceB) {\n    return false;\n  }\n  if (isOutFaceA && !isOutFaceB) {\n    return true;\n  }\n\n  return a.getLastRenewed() > b.getLastRenewed();\n}\n\nvoid\nForwarder::onOutgoingInterest(shared_ptr<pit::Entry> pitEntry, Face& outFace,\n                              bool wantNewNonce)\n{\n  if (outFace.getId() == INVALID_FACEID) {\n    NFD_LOG_WARN(\"onOutgoingInterest face=invalid interest=\" << pitEntry->getName());\n    return;\n  }\n  NFD_LOG_DEBUG(\"onOutgoingInterest face=\" << outFace.getId() <<\n                \" interest=\" << pitEntry->getName());\n\n  // scope control\n  if (pitEntry->violatesScope(outFace)) {\n    NFD_LOG_DEBUG(\"onOutgoingInterest face=\" << outFace.getId() <<\n                  \" interest=\" << pitEntry->getName() << \" violates scope\");\n    return;\n  }\n\n  // pick Interest\n  const pit::InRecordCollection& inRecords = pitEntry->getInRecords();\n  pit::InRecordCollection::const_iterator pickedInRecord = std::max_element(\n    inRecords.begin(), inRecords.end(), bind(&compare_pickInterest, _1, _2, &outFace));\n  BOOST_ASSERT(pickedInRecord != inRecords.end());\n  shared_ptr<Interest> interest = const_pointer_cast<Interest>(\n    pickedInRecord->getInterest().shared_from_this());\n\n  if (wantNewNonce) {\n    interest = make_shared<Interest>(*interest);\n    static boost::random::uniform_int_distribution<uint32_t> dist;\n    interest->setNonce(dist(getGlobalRng()));\n  }\n\n  // insert OutRecord\n  pitEntry->insertOrUpdateOutRecord(outFace.shared_from_this(), *interest);\n\n  // send Interest\n  outFace.sendInterest(*interest);\n  ++m_counters.getNOutInterests();\n}\n\nvoid\nForwarder::onInterestReject(shared_ptr<pit::Entry> pitEntry)\n{\n  if (pitEntry->hasUnexpiredOutRecords()) {\n    NFD_LOG_ERROR(\"onInterestReject interest=\" << pitEntry->getName() <<\n                  \" cannot reject forwarded Interest\");\n    return;\n  }\n  NFD_LOG_DEBUG(\"onInterestReject interest=\" << pitEntry->getName());\n\n  // cancel unsatisfy & straggler timer\n  this->cancelUnsatisfyAndStragglerTimer(pitEntry);\n\n  // set PIT straggler timer\n  this->setStragglerTimer(pitEntry, false);\n}\n\nvoid\nForwarder::onInterestUnsatisfied(shared_ptr<pit::Entry> pitEntry)\n{\n  NFD_LOG_DEBUG(\"onInterestUnsatisfied interest=\" << pitEntry->getName());\n\n  // invoke PIT unsatisfied callback\n  beforeExpirePendingInterest(*pitEntry);\n  this->dispatchToStrategy(pitEntry, bind(&Strategy::beforeExpirePendingInterest, _1,\n                                          pitEntry));\n\n  // goto Interest Finalize pipeline\n  this->onInterestFinalize(pitEntry, false);\n}\n\nvoid\nForwarder::onInterestFinalize(shared_ptr<pit::Entry> pitEntry, bool isSatisfied,\n                              const time::milliseconds& dataFreshnessPeriod)\n{\n  NFD_LOG_DEBUG(\"onInterestFinalize interest=\" << pitEntry->getName() <<\n                (isSatisfied ? \" satisfied\" : \" unsatisfied\"));\n\n  // Dead Nonce List insert if necessary\n  this->insertDeadNonceList(*pitEntry, isSatisfied, dataFreshnessPeriod, 0);\n\n  // PIT delete\n  this->cancelUnsatisfyAndStragglerTimer(pitEntry);\n  m_pit.erase(pitEntry);\n}\n\nvoid\nForwarder::onIncomingData(Face& inFace, const Data& data)\n{\n  // receive Data\n  NFD_LOG_DEBUG(\"onIncomingData face=\" << inFace.getId() << \" data=\" << data.getName());\n  const_cast<Data&>(data).setIncomingFaceId(inFace.getId());\n  ++m_counters.getNInDatas();\n\n  // /localhost scope control\n  bool isViolatingLocalhost = !inFace.isLocal() &&\n                              LOCALHOST_NAME.isPrefixOf(data.getName());\n  if (isViolatingLocalhost) {\n    NFD_LOG_DEBUG(\"onIncomingData face=\" << inFace.getId() <<\n                  \" data=\" << data.getName() << \" violates /localhost\");\n    // (drop)\n    return;\n  }\n\n  // PIT match\n  pit::DataMatchResult pitMatches = m_pit.findAllDataMatches(data);\n  if (pitMatches.begin() == pitMatches.end()) {\n    // goto Data unsolicited pipeline\n    this->onDataUnsolicited(inFace, data);\n    return;\n  }\n\n  // Remove Ptr<Packet> from the Data before inserting into cache, serving two purposes\n  // - reduce amount of memory used by cached entries\n  // - remove all tags that (e.g., hop count tag) that could have been associated with Ptr<Packet>\n  //\n  // Copying of Data is relatively cheap operation, as it copies (mostly) a collection of Blocks\n  // pointing to the same underlying memory buffer.\n  shared_ptr<Data> dataCopyWithoutPacket = make_shared<Data>(data);\n  dataCopyWithoutPacket->removeTag<ns3::ndn::Ns3PacketTag>();\n\n  // CS insert\n  if (m_csFromNdnSim == nullptr){\n      m_cs.insert(*dataCopyWithoutPacket);\n    }\n    else{\n      m_csFromNdnSim->Add(dataCopyWithoutPacket);\n    }\n    // OP insert, specifically for DASH\n    if(m_opFromNdnSim == nullptr){\n        m_op.insert(*dataCopyWithoutPacket);\n    }else{\n        m_opFromNdnSim->Add(dataCopyWithoutPacket);\n    }\n\n  std::set<shared_ptr<Face> > pendingDownstreams;\n  // foreach PitEntry\n  for (const shared_ptr<pit::Entry>& pitEntry : pitMatches) {\n    NFD_LOG_DEBUG(\"onIncomingData matching=\" << pitEntry->getName());\n\n    // cancel unsatisfy & straggler timer\n    this->cancelUnsatisfyAndStragglerTimer(pitEntry);\n\n    // remember pending downstreams\n    const pit::InRecordCollection& inRecords = pitEntry->getInRecords();\n    for (pit::InRecordCollection::const_iterator it = inRecords.begin();\n                                                 it != inRecords.end(); ++it) {\n      if (it->getExpiry() > time::steady_clock::now()) {\n        pendingDownstreams.insert(it->getFace());\n      }\n    }\n\n    // invoke PIT satisfy callback\n    beforeSatisfyInterest(*pitEntry, inFace, data);\n    this->dispatchToStrategy(pitEntry, bind(&Strategy::beforeSatisfyInterest, _1,\n                                            pitEntry, cref(inFace), cref(data)));\n\n    // Dead Nonce List insert if necessary (for OutRecord of inFace)\n    this->insertDeadNonceList(*pitEntry, true, data.getFreshnessPeriod(), &inFace);\n\n    // mark PIT satisfied\n    pitEntry->deleteInRecords();\n    pitEntry->deleteOutRecord(inFace);\n\n    // set PIT straggler timer\n    this->setStragglerTimer(pitEntry, true, data.getFreshnessPeriod());\n  }\n\n  // foreach pending downstream\n  for (std::set<shared_ptr<Face> >::iterator it = pendingDownstreams.begin();\n      it != pendingDownstreams.end(); ++it) {\n    shared_ptr<Face> pendingDownstream = *it;\n    if (pendingDownstream.get() == &inFace) {\n      continue;\n    }\n    // goto outgoing Data pipeline\n    this->onOutgoingData(data, *pendingDownstream);\n  }\n}\n\nvoid\nForwarder::onDataUnsolicited(Face& inFace, const Data& data)\n{\n  // accept to cache?\n  bool acceptToCache = inFace.isLocal();\n  if (acceptToCache) {\n    // CS insert\n    if (m_csFromNdnSim == nullptr){\n      m_cs.insert(data, true);\n    }\n    else{\n      m_csFromNdnSim->Add(data.shared_from_this());\n    }\n    // OP insert, specificate for DASH\n    if (m_opFromNdnSim == nullptr){\n      m_op.insert(data,true);\n    }  \n    else{\n      m_opFromNdnSim->Add(data.shared_from_this());\n    }\n  }\n\n  NFD_LOG_DEBUG(\"onDataUnsolicited face=\" << inFace.getId() <<\n                \" data=\" << data.getName() <<\n                (acceptToCache ? \" cached\" : \" not cached\"));\n}\n\nvoid\nForwarder::onOutgoingData(const Data& data, Face& outFace)\n{\n  if (outFace.getId() == INVALID_FACEID) {\n    NFD_LOG_WARN(\"onOutgoingData face=invalid data=\" << data.getName());\n    return;\n  }\n  NFD_LOG_DEBUG(\"onOutgoingData face=\" << outFace.getId() << \" data=\" << data.getName());\n\n  // /localhost scope control\n  bool isViolatingLocalhost = !outFace.isLocal() &&\n                              LOCALHOST_NAME.isPrefixOf(data.getName());\n  if (isViolatingLocalhost) {\n    NFD_LOG_DEBUG(\"onOutgoingData face=\" << outFace.getId() <<\n                  \" data=\" << data.getName() << \" violates /localhost\");\n    // (drop)\n    return;\n  }\n  // TODO traffic manager\n\n  // send Data\n  outFace.sendData(data);\n  ++m_counters.getNOutDatas();\n}\n\n\nstatic inline bool\ncompare_InRecord_expiry(const pit::InRecord& a, const pit::InRecord& b)\n{\n  return a.getExpiry() < b.getExpiry();\n}\n\nvoid\nForwarder::setUnsatisfyTimer(shared_ptr<pit::Entry> pitEntry)\n{\n  const pit::InRecordCollection& inRecords = pitEntry->getInRecords();\n  pit::InRecordCollection::const_iterator lastExpiring =\n    std::max_element(inRecords.begin(), inRecords.end(),\n    &compare_InRecord_expiry);\n\n  time::steady_clock::TimePoint lastExpiry = lastExpiring->getExpiry();\n  time::nanoseconds lastExpiryFromNow = lastExpiry  - time::steady_clock::now();\n  if (lastExpiryFromNow <= time::seconds(0)) {\n    // TODO all InRecords are already expired; will this happen?\n  }\n\n  scheduler::cancel(pitEntry->m_unsatisfyTimer);\n  pitEntry->m_unsatisfyTimer = scheduler::schedule(lastExpiryFromNow,\n    bind(&Forwarder::onInterestUnsatisfied, this, pitEntry));\n}\n\nvoid\nForwarder::setStragglerTimer(shared_ptr<pit::Entry> pitEntry, bool isSatisfied,\n                             const time::milliseconds& dataFreshnessPeriod)\n{\n  time::nanoseconds stragglerTime = time::milliseconds(100);\n\n  scheduler::cancel(pitEntry->m_stragglerTimer);\n  pitEntry->m_stragglerTimer = scheduler::schedule(stragglerTime,\n    bind(&Forwarder::onInterestFinalize, this, pitEntry, isSatisfied, dataFreshnessPeriod));\n}\n\nvoid\nForwarder::cancelUnsatisfyAndStragglerTimer(shared_ptr<pit::Entry> pitEntry)\n{\n  scheduler::cancel(pitEntry->m_unsatisfyTimer);\n  scheduler::cancel(pitEntry->m_stragglerTimer);\n}\n\nstatic inline void\ninsertNonceToDnl(DeadNonceList& dnl, const pit::Entry& pitEntry,\n                 const pit::OutRecord& outRecord)\n{\n  dnl.add(pitEntry.getName(), outRecord.getLastNonce());\n}\n\nvoid\nForwarder::insertDeadNonceList(pit::Entry& pitEntry, bool isSatisfied,\n                               const time::milliseconds& dataFreshnessPeriod,\n                               Face* upstream)\n{\n  // need Dead Nonce List insert?\n  bool needDnl = false;\n  if (isSatisfied) {\n    bool hasFreshnessPeriod = dataFreshnessPeriod >= time::milliseconds::zero();\n    // Data never becomes stale if it doesn't have FreshnessPeriod field\n    needDnl = static_cast<bool>(pitEntry.getInterest().getMustBeFresh()) &&\n              (hasFreshnessPeriod && dataFreshnessPeriod < m_deadNonceList.getLifetime());\n  }\n  else {\n    needDnl = true;\n  }\n\n  if (!needDnl) {\n    return;\n  }\n\n  // Dead Nonce List insert\n  if (upstream == 0) {\n    // insert all outgoing Nonces\n    const pit::OutRecordCollection& outRecords = pitEntry.getOutRecords();\n    std::for_each(outRecords.begin(), outRecords.end(),\n                  bind(&insertNonceToDnl, ref(m_deadNonceList), cref(pitEntry), _1));\n  }\n  else {\n    // insert outgoing Nonce of a specific face\n    pit::OutRecordCollection::const_iterator outRecord = pitEntry.getOutRecord(*upstream);\n    if (outRecord != pitEntry.getOutRecords().end()) {\n      m_deadNonceList.add(pitEntry.getName(), outRecord->getLastNonce());\n    }\n  }\n}\n\n} // namespace nfd\n",
			"file": "NFD/daemon/fw/forwarder.cpp",
			"file_size": 20199,
			"file_write_time": 131263338883215693,
			"settings":
			{
				"buffer_size": 20202,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ndn-cxx/src/data.hpp",
			"settings":
			{
				"buffer_size": 10149,
				"line_ending": "Unix"
			}
		},
		{
			"file": "apps/oon-processor.cpp",
			"settings":
			{
				"buffer_size": 12420,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/OON.sublime-build",
					""
				]
			],
			[
				"Packages/User/OON.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/percy/ndnSIM/ns-3/src/ndnSIM",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/model",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/tests",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/tests/unit-tests"
	],
	"file_history":
	[
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/name_map.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/encoding/block.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/encoding/buffer.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-file-simple-example1.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/oon-fileserver.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/oon-fileserver.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-app.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-app.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-fake-multimedia-server.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/model/ndn-app-face.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/model/ndn-app-face.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/tests/daemon/face/tcp.t.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-fake-fileserver.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/encoding/block.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/data.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/encoding/encoding-buffer-fwd.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/oon-avc-wifi.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-avc-wifi.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-file-simple-example5-virtual.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/oon-strategy.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/strategy.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/forwarder.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/forwarder.cpp",
		"/home/percy/ndnSIM/ns-3/wscript",
		"/home/percy/ndnSIM/ns-3/.gitmodules",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/util/sqlite3-statement.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/cs.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/cs.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/cs-entry.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/util/sqlite3-statement.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-congestion-alt-topo-plugin.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/.gitmodules",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/.gitmodules",
		"/home/percy/ndnSIM/.gitmodules",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-multimedia-simple-avc-example1.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/best-route-strategy.cpp",
		"/home/percy/multimediaData/AVC/BBB-2s.mpd",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-multimedia-consumer.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-multimedia-consumer.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/apps/ndn-fileserver.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/model/ndn-l3-protocol.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/strategy.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/best-route-strategy2.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/best-route-strategy.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-file-simple-example4-multi.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-file-simple-example2-tracers.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-file-simple-example3-enhanced.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/strategy-registry.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/utils/tracers/ndn-dashplayer-tracer.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/utils/tracers/ndn-dashplayer-tracer.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-multimedia-avc-server.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/model/cs/ndn-content-store.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/helper/ndn-stack-helper.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/helper/ndn-stack-helper.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/data.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/tests/daemon/fw/strategy-tester.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/face/face.hpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-simple.cpp",
		"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples/ndn-simple-wifi.cpp",
		"/home/percy/multimediaData/AVC/BBB/BigBuckBunnyNonSeg_2s_isoffmain_DIS_23009_1_v_2_1c2_2011_08_30.mpd",
		"/home/percy/multimediaData/AVC/BBB/BigBuckBunny_2s_isoffmain_DIS_23009_1_v_2_1c2_2011_08_30.mpd",
		"/home/lockheed/AMuStNDN/ns-3/src/ndnSIM/examples/ndn-file-simple-example4-multi.cpp",
		"/home/lockheed/AMuStNDN/ns-3/src/ndnSIM/examples/ndn-file-simple-example1.a",
		"/home/lockheed/AMuStNDN/ns-3/src/ndnSIM/examples/dash-ndn-wifi.cpp",
		"/home/lockheed/AMuStNDN/ns-3/src/ndnSIM/examples/ndn-simple-wifi.cpp",
		"/home/lockheed/AMuStNDN/ns-3/src/ndnSIM/examples/ndn-multimedia-brite-example1.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/best-route-strategy2.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/face/face.hpp",
		"/home/lockheed/AMuStNDN/ns-3/src/ndnSIM/examples/ndn-simple-wifi-old.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/mgmt/face-manager.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/strategy.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/fw/strategy.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/fw/forwarder.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/table/cs.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/ndn-cxx/util/sqlite3-statement.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/buffer.h",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/forwarder.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/nfd.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/mgmt/fib-manager.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/best-route-strategy.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/client-control-strategy.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/ndn-cxx/management/nfd-control-parameters.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/mgmt/face-manager.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/mgmt/tables-config-section.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/mgmt/tables-config-section.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/forwarder.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/table/fib.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/core/model/pointer.cc",
		"/home/lockheed/ndnSIM/ns-3/src/core/model/type-id.cc",
		"/home/lockheed/ndnSIM/ns-3/examples/wireless/wifi-simple-adhoc-grid.cc",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/best-route-strategy.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/examples/ndn-grid.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/ndn-cxx/management/nfd-fib-entry.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/fib-nexthop.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/table/fib-nexthop.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/pit-entry.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/table/pit-entry.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/client-control-strategy.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/mgmt/fib-manager.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/core/model/cairo-wideint-private.h",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/management/nfd-fib-entry.hpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/ndnSIM/NFD/daemon/mgmt/face-manager.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/rib/route.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/rib/rib.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/core/config-file.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/management/nfd-rib-entry.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/management/nfd-face-query-filter.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/ndn-cxx/src/management/nfd-fib-entry.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/cs-entry-impl.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/table/cs-internal.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/multicast-strategy.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/retx-suppression-fixed.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/retx-suppression.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/retx-suppression.hpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/mgmt/fib-manager.cpp",
		"/home/lockheed/ndnSIM/ns-3/src/ndnSIM/NFD/daemon/fw/face-table.cpp",
		"/home/lockheed/ndnSIM/ns-3/build/ns3/object.h",
		"/root/.config/sublime-text-3/Packages/User/OON.sublime-build"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 111.0,
		"where_history":
		[
			"/home/percy/ndnSIM/ns-3/src/",
			"/home/percy/ndnSIM/ns-3/src/ndnSIM/",
			"/home/percy/ndnSIM/ns-3/src/ndnSIM/examples",
			"/home/percy/ndnSIM/ns-3/src/ndnSIM/",
			"/home/percy/ndnSIM/ns-3/src/ndnSIM/NFD/daemon"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"cout",
			"File",
			"ns3::ndn::OONProcessor",
			"D_ACTUAL_OVERHEAD",
			"m_transmittedDatas",
			"Data",
			"Hit",
			"onProcessingData",
			"onContentStoreHit",
			"start",
			"m_cs",
			"onProcessingData",
			"Processing",
			"processing",
			"m_opFromNdnSim",
			"setOpFromNdnSim",
			"setCsFromNdnSim",
			"m_csFromNdnSim",
			"      m_csFromNdnSim->Add(data.shared_from_this());\nm_csFromNdnSim",
			"      m_csFromNdnSim->Add(data.shared_from_this());\nsetCsFromNdnSim",
			"m_csFromNdnSim",
			"m_cs",
			"onOutgoingData",
			"onContentStoreHit",
			"Object",
			"*match",
			"match",
			"m_cs",
			"onContentStoreHit",
			"beforeSatisfyInterest",
			"onContentStoreHit",
			"m_cs",
			"op",
			"lockheed",
			"m_cs",
			"setCs",
			"m_maxCsSize",
			"m_contentStoreFactory",
			"m_maxCsSize",
			"sendInterest",
			"startObjectProcessing",
			"*match",
			"match",
			"onProcessingData",
			"onContentStore",
			"onProcessingData",
			"onObjec",
			"onProcessingData",
			"onObjectProcessorHit",
			"interest",
			"intere",
			"onContentStoreHit",
			"onContentHit",
			"onObjectProcessorHit",
			"onContent",
			"onOb",
			"onOutgoingData",
			"onOutData",
			"onOut",
			"onContentStoreHit",
			"OnContent",
			"canForwardTo",
			"percy",
			"~",
			"percy",
			"OfdmRate54Mbps",
			"m_csFromNdnSim",
			"onContentStoreHit",
			"miss",
			"m_csFace",
			"cs",
			"faceTable",
			"OBJECT_COST_JUDGE",
			"addNextHop",
			"cost",
			"sendInterest",
			"onOutgoingInterest",
			"FaceId",
			"onOutgoingInterest",
			"nicList",
			"processConfig",
			"fib-enumeration-publisher.cpp",
			"Object",
			"setFaceID",
			"Object Oriented",
			"OON"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"folders":
	[
		{
			"path": "/home/percy/ndnSIM/ns-3/src/ndnSIM"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "NFD/daemon/fw/forwarder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20202,
						"regions":
						{
						},
						"selection":
						[
							[
								6830,
								6830
							]
						],
						"settings":
						{
							"spell_check": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 7.0,
						"translation.y": 3704.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ndn-cxx/src/data.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10149,
						"regions":
						{
						},
						"selection":
						[
							[
								2275,
								2275
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5513.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "apps/oon-processor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12420,
						"regions":
						{
						},
						"selection":
						[
							[
								6598,
								6598
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3782.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 450.0,
		"last_filter": "content",
		"selected_items":
		[
			[
				"content",
				"ContentStore"
			],
			[
				"onContentStoreHit",
				"onContentStoreHit"
			],
			[
				"cost",
				"setCost"
			],
			[
				"OnOutgoingInterest",
				"onOutgoingInterest"
			],
			[
				"onOutgoingInterest",
				"onOutgoingInterest"
			],
			[
				"setFaceId",
				"setFaceId"
			],
			[
				"setface",
				"setFaceId"
			],
			[
				"face",
				"FaceId"
			],
			[
				"Object",
				"Object"
			],
			[
				"",
				"CacheHits"
			]
		],
		"width": 678.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 255.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
