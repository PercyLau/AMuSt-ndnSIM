// // OON 20161225
// #include <fstream>
// #include <string>
// #include "ns3/lte-helper.h"
// #include "ns3/epc-helper.h"
// #include "ns3/core-module.h"
// #include "ns3/network-module.h"
// #include "ns3/ipv4-global-routing-helper.h"
// #include "ns3/internet-module.h"
// #include "ns3/mobility-module.h"
// #include "ns3/lte-module.h"
// #include "ns3/applications-module.h"
// #include "ns3/point-to-point-helper.h"
// #include "ns3/config-store.h"
// #include "ns3/ndnSIM-module.h"
// #include "ns3/ndnSIM/apps/ndn-app.hpp"
// //#include "ns3/gtk-config-store.h"

// using namespace std;

// namespace ns3{
// void
// FileDownloadedTrace(Ptr<ns3::ndn::App> app, shared_ptr<const ndn::Name> interestName, double downloadSpeed, long milliSeconds)
// {
//   std::cout << "Trace: File finished downloading: " << Simulator::Now().GetMilliSeconds () << " "<< *interestName <<
//      " Download Speed: " << downloadSpeed/1000.0 << " Kilobit/s in " << milliSeconds << " ms" << std::endl;
// }

// void
// FileDownloadedManifestTrace(Ptr<ns3::ndn::App> app, shared_ptr<const ndn::Name> interestName, long fileSize)
// {
//   std::cout << "Trace: Manifest received: " << Simulator::Now().GetMilliSeconds () <<" "<< *interestName << " File Size: " << fileSize << std::endl;
// }

// void
// FileDownloadStartedTrace(Ptr<ns3::ndn::App> app, shared_ptr<const ndn::Name> interestName)
// {
//   std::cout << "Trace: File started downloading: " << Simulator::Now().GetMilliSeconds () <<" "<< *interestName << std::endl;
// }
// //**
//  //* Sample simulation script for LTE+EPC. It instantiates several eNodeB,
// // * attaches one UE per eNodeB starts a flow for each UE to  and from a //remote host.
// // * It also  starts yet another flow between each UE pair.
// // */
// NS_LOG_COMPONENT_DEFINE ("EpcFirstExample");
// int main (int argc, char *argv[])
// {

//   uint16_t num_UE = 1;
//   double interPacketInterval = 10;


//   Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();
//   Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();
//   lteHelper->SetEpcHelper (epcHelper);

//   ConfigStore inputConfig;
//   inputConfig.ConfigureDefaults();


//   Ptr<Node> pgw = epcHelper->GetPgwNode ();

//    // Create a single RemoteHost
//   NodeContainer remoteHostContainer;
//   remoteHostContainer.Create (2);
//   Ptr<Node> NDNrouter = teHostContainer.Get (1);
//   Ptr<Node> remoteHost = remoteHostContainer.Get (0);
//   InternetStackHelper internet;
//   internet.Install (remoteHostContainer);

//   // Create the Internet
//   PointToPointHelper p2ph;
//   p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("1000Mb/s")));
//   //p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
//   p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));
//   NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);

//   p2ph.InstallAll()

//   Ipv4AddressHelper ipv4h;
//   ipv4h.SetBase ("1.0.0.0", "255.0.0.0");
//   Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);
//   // interface 0 is localhost, 1 is the p2p device
//   Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);

//   Ipv4StaticRoutingHelper ipv4RoutingHelper;
//   Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());
//   remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);

//   NodeContainer ueNodes;
//   NodeContainer enbNodes;
//   enbNodes.Create(1);
//   ueNodes.Create(num_UE);

//   // Install Mobility Model of eNB
//   Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
//   positionAlloc->Add (Vector(20, 20, 0));

// MobilityHelper eNBpos;
// eNBpos.SetMobilityModel("ns3::ConstantPositionMobilityModel");
// eNBpos.SetPositionAllocator(positionAlloc);
// eNBpos.Install(enbNodes);

// MobilityHelper mobility;
// Ptr<UniformRandomVariable> randomizer = CreateObject<UniformRandomVariable>();
// randomizer->SetAttribute("Min", DoubleValue(0)); // 
// randomizer->SetAttribute("Max", DoubleValue(40));
// mobility.SetPositionAllocator("ns3::RandomBoxPositionAllocator", "X", PointerValue(randomizer),
//                                 "Y", PointerValue(randomizer), "Z", PointerValue(randomizer));

//   mobility.Install(ueNodes);

//   // Install LTE Devices to the nodes
//   NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
//   NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);

//   // Install the IP stack on the UEs
//   //OON !! UEs need to have IPv4 installed before EPS bearers can be activated
//   internet.Install (ueNodes);
//   Ipv4InterfaceContainer ueIpIface;
//   ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));
//   //Assign IP address to UEs, and install applications
//   for (uint16_t u = 0; u < num_UE; ++u)
//     {
//       Ptr<Node> ueNode = ueNodes.Get (u);
//       // Set the default gateway for the UE
//       Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());
//       ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
//     }

//   // Attach one UE per eNodeB
//   for (uint16_t i = 0; i < num_UE; i++)
//       {
//         lteHelper->Attach (ueLteDevs.Get(i), enbLteDevs.Get(0));
//         // side effect: the default EPS bearer will be activated
//       }

//    // Install and start applications on UEs and remote host
//   uint16_t dlPort = 1234;
//   uint16_t ulPort = 2000;
//   uint16_t otherPort = 3000;
//   ApplicationContainer clientApps;
//   ApplicationContainer serverApps;
//   for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
//     {
//       ++ulPort;
//       ++otherPort;
//       PacketSinkHelper dlPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), dlPort));
//       PacketSinkHelper ulPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), ulPort));
//       PacketSinkHelper packetSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), otherPort));
//       serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get(u)));
//       serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
//       serverApps.Add (packetSinkHelper.Install (ueNodes.Get(u)));

//       UdpClientHelper dlClient (ueIpIface.GetAddress (u), dlPort);
//       dlClient.SetAttribute ("Interval", TimeValue (MilliSeconds(interPacketInterval)));
//       dlClient.SetAttribute ("MaxPackets", UintegerValue(1000000));

//       UdpClientHelper ulClient (remoteHostAddr, ulPort);
//       ulClient.SetAttribute ("Interval", TimeValue (MilliSeconds(interPacketInterval)));
//       ulClient.SetAttribute ("MaxPackets", UintegerValue(1000000));

//       UdpClientHelper client (ueIpIface.GetAddress (u), otherPort);
//       client.SetAttribute ("Interval", TimeValue (MilliSeconds(interPacketInterval)));
//       client.SetAttribute ("MaxPackets", UintegerValue(1000000));

//       clientApps.Add (dlClient.Install (remoteHost));
//       clientApps.Add (ulClient.Install (ueNodes.Get(u)));
//       if (u+1 < ueNodes.GetN ())
//         {
//           clientApps.Add (client.Install (ueNodes.Get(u+1)));
//         }
//       else
//         {
//           clientApps.Add (client.Install (ueNodes.Get(0)));
//         }
//     }
//   serverApps.Start (Seconds (0.01));
//   clientApps.Start (Seconds (0.01));

//   lteHelper->EnableTraces ();

// //-------------------------------------------------------------------------NDN--------------------------------------------

//   ndn::StackHelper ndnHelper;
//   ndnHelper.SetOldContentStore("ns3::ndn::cs::Lfu", "MaxSize", "10000");
//   ndnHelper.SetDefaultRoutes(false);
//   ndnHelper.InstallAll();
  
//   ndn::StrategyChoiceHelper::InstallAll("/prefix", "/localhost/nfd/strategy/best-route");

//   ndn::GlobalRoutingHelper ndnGlobalRoutingHelper;
//   ndnGlobalRoutingHelper.InstallAll();


//   ndn::AppHelper consumerHelper("ns3::ndn::FileConsumer");
//   consumerHelper.SetAttribute("FileToRequest", StringValue("/home/percy/multimediaData/bunny_1200kbit_dashNonSeg.mp4"));
//   consumerHelper.Install(ueNodes);      

//   Config::ConnectWithoutContext("/NodeList/*/ApplicationList/*/FileDownloadFinished",
//                                MakeCallback(&FileDownloadedTrace));
//   Config::ConnectWithoutContext("/NodeList/*/ApplicationList/*/ManifestReceived",
//                                MakeCallback(&FileDownloadedManifestTrace));
//   Config::ConnectWithoutContext("/NodeList/*/ApplicationList/*/FileDownloadStarted",
//                                MakeCallback(&FileDownloadStartedTrace));

//   ndn::AppHelper producerHelper("ns3::ndn::FileServer");
//   producerHelper.SetPrefix("/home/percy/multimediaData/");
//   producerHelper.SetAttribute("ContentDirectory", StringValue("/home/percy/multimediaData/"));
//   producerHelper.Install(remoteHost);

//   ndnGlobalRoutingHelper.AddOrigins("/home/percy/multimediaData/", remoteHost);

//   ndn::GlobalRoutingHelper::CalculateRoutes();

// //-------------------------------------------------------------------------------------------------------------

//   Simulator::Run();
//   Simulator::Destroy();

//   NS_LOG_UNCOND("Simulation Finished.");
//   /*GtkConfigStore config;
//   config.ConfigureAttributes();*/

//   Simulator::Destroy();
//   return 0;

// }

// }

// int
// main(int argc, char* argv[])
// {
//   return ns3::main(argc, argv);
// }
